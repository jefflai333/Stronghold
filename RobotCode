
package org.usfirst.frc.team6135.robot;

import edu.wpi.first.wpilibj.Compressor;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.Servo;
import edu.wpi.first.wpilibj.Talon;
import edu.wpi.first.wpilibj.Victor;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.buttons.Button;
import edu.wpi.first.wpilibj.buttons.JoystickButton;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {
	Joystick driveStick;
	Victor leftDrive;                     
	Victor rightDrive;
	Talon armLift;
	Talon armWinch;
	Talon armExtend;
	Servo cameraRotate;
	Servo cameraTilt;
	double rightDriveSet;
    double leftDriveSet;
    int reverse = 1;
    double scale = 1;
    double deadZone;
    double leftDriveValue;
    double rightDriveValue;
    double xpositive;
    double xnegative;
    double ypositive;
    double ynegative;
    int debounceLoopCount;
    final String defaultAuto = "Default";
    final String customAuto = "My Auto";
    String autoSelected;
    SendableChooser chooser;
	Encoder encoder;
	int pulsesPerRevolution;
    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    public void robotInit() {
        chooser = new SendableChooser();
        chooser.addDefault("Default Auto", defaultAuto);
        chooser.addObject("My Auto", customAuto);
        SmartDashboard.putData("Auto choices", chooser);
        driveStick = new Joystick(0);
        leftDrive = new Victor(0);
        rightDrive = new Victor(1);
        deadZone = 0.2;
        debounceLoopCount = 0;
        pulsesPerRevolution = 1;
        encoder = new Encoder(1, 2, true, Encoder.EncodingType.k4X);
        encoder.setDistancePerPulse(8 * Math.PI);
        armWinch = new Talon(4);
        armExtend = new Talon(5);
        armLift = new Talon(6);
        cameraRotate = new Servo(2);
        cameraTilt = new Servo(3);
        xpositive = 0.0;
        xnegative = 0.0;
        ypositive = 0.0;
        ynegative = 0.0;
    }
    
	/**
	 * This autonomous (along with the chooser code above) shows how to select between different autonomous modes
	 * using the dashboard. The sendable chooser code works with the Java SmartDashboard. If you prefer the LabVIEW
	 * Dashboard, remove all of the chooser code and uncomment the getString line to get the auto name from the text box
	 * below the Gyro
	 *
	 * You can add additional auto modes by adding additional comparisons to the switch structure below with additional strings.
	 * If using the SendableChooser make sure to add them to the chooser code above as well.
	 */
    public void autonomousInit() {
    	autoSelected = (String) chooser.getSelected();
//		autoSelected = SmartDashboard.getString("Auto Selector", defaultAuto);
		System.out.println("Auto selected: " + autoSelected);
    }

    /**
     * This function is called periodically during autonomous
     */
    public void autonomousPeriodic() {
    	switch(autoSelected) {
    	case customAuto:
        //Put custom auto code here   
            break;
    	case defaultAuto:
    	default:
    	//Put default auto code here
            break;
    	}
    }

    /**
     * This function is called periodically during operator control
     */
    public void teleopPeriodic(){	
    	leftDriveSet = driveStick.getRawAxis(1) - driveStick.getRawAxis(0);
    	rightDriveSet = driveStick.getRawAxis(1) + driveStick.getRawAxis(0);
    	if (driveStick.getRawButton(2) && debounceLoopCount < 1) {
        	reverse *= -1;
        	debounceLoopCount = 15;
        	System.out.println("Reversed");
        }
    	if (debounceLoopCount > 0) {
    		debounceLoopCount--;
    	}
    	System.out.println("Debounce Loop: " + debounceLoopCount);
   		leftDriveValue = reverse * leftDriveSet;
   		rightDriveValue = reverse * rightDriveSet;
    	//Update motors
    	if (Math.abs(leftDriveValue) > deadZone && Math.abs(rightDriveValue) > deadZone) {
    		leftDrive.set(leftDriveValue); //Comment out for testing inputs
            rightDrive.set(rightDriveValue); //Comment out for testing inputs
            System.out.println("Driver values set");
    	}
    	else {
    		leftDrive.set(0);
            rightDrive.set(0);
            System.out.println("Driver values not set");
    	}
    	System.out.println("Left Drive Set: " + leftDriveSet);
    	System.out.println("Right Drive Set: " + rightDriveSet);
        System.out.println("Left Drive Value: " + leftDriveValue);
        System.out.println("Right Drive Value: " + rightDriveValue);
        System.out.println("End of loop");
        System.out.println();
        System.out.println();
        //CARL MAKE SURE THE BUTTONS CORRESPOND WITH THE CAMERA MOVEMENT PROPERLY
        //XPOSITIVE SHOULD BE UP ARROW, ETC.
        if (driveStick.getRawButton(3)) {
        xpositive = xpositive + 0.1
        }
        if (driveStick.getRawButton(4)) {
        xnegative = xnegative - 0.1
        }
        if (driveStick.getRawButton(5)) {
        ypositive = ypositive + 0.1
        }
        if (driveStick.getRawButton(6)) {
        ynegative = ynegative - 0.1
        }
    	cameraRotate.set(xpositive + xnegative);
    	cameraTilt.set(ypositive + ynegative);
        if(driveStick.getRawButton(7)) {
        	armLift.set(1.0);
        }
        else if(driveStick.getRawButton(8)) {
        	armLift.set(-1.0);
        }
        else {
        	armLift.set(0.0);
        }
        if(driveStick.getRawButton(9)) {
        	armWinch.set(1.0);
        }
        else if(driveStick.getRawButton(10)) {
        	armWinch.set(-1.0);
        }
        else {
        	armWinch.set(0.0);
        }
        if(driveStick.getRawButton(11)) {
        	armExtend.set(1.0);
        }
        else if(driveStick.getRawButton(12)) {
        	armExtend.set(-1.0);
        }
        else {
        	armExtend.set(0.0);
        }
    }
    /**
     * This function is called periodically during test mode
     */
    public void testPeriodic() {
    
    }
}
